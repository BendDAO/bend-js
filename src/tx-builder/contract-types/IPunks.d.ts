/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IPunksInterface extends ethers.utils.Interface {
  functions: {
    'balanceOf(address)': FunctionFragment;
    'buyPunk(uint256)': FunctionFragment;
    'offerPunkForSaleToAddress(uint256,uint256,address)': FunctionFragment;
    'punkIndexToAddress(uint256)': FunctionFragment;
    'punksOfferedForSale(uint256)': FunctionFragment;
    'transferPunk(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'buyPunk',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'offerPunkForSaleToAddress',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'punkIndexToAddress',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'punksOfferedForSale',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferPunk',
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyPunk', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'offerPunkForSaleToAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'punkIndexToAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'punksOfferedForSale',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferPunk',
    data: BytesLike
  ): Result;

  events: {};
}

export class IPunks extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPunksInterface;

  functions: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyPunk(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'buyPunk(uint256)'(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'offerPunkForSaleToAddress(uint256,uint256,address)'(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    punkIndexToAddress(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    'punkIndexToAddress(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    punksOfferedForSale(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        isForSale: boolean;
        punkIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
        0: boolean;
        1: BigNumber;
        2: string;
        3: BigNumber;
        4: string;
      };
    }>;

    'punksOfferedForSale(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        isForSale: boolean;
        punkIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
        0: boolean;
        1: BigNumber;
        2: string;
        3: BigNumber;
        4: string;
      };
    }>;

    transferPunk(
      to: string,
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'transferPunk(address,uint256)'(
      to: string,
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyPunk(
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'buyPunk(uint256)'(
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerPunkForSaleToAddress(
    punkIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'offerPunkForSaleToAddress(uint256,uint256,address)'(
    punkIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  punkIndexToAddress(
    punkIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  'punkIndexToAddress(uint256)'(
    punkIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  punksOfferedForSale(
    punkIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    isForSale: boolean;
    punkIndex: BigNumber;
    seller: string;
    minValue: BigNumber;
    onlySellTo: string;
    0: boolean;
    1: BigNumber;
    2: string;
    3: BigNumber;
    4: string;
  }>;

  'punksOfferedForSale(uint256)'(
    punkIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    isForSale: boolean;
    punkIndex: BigNumber;
    seller: string;
    minValue: BigNumber;
    onlySellTo: string;
    0: boolean;
    1: BigNumber;
    2: string;
    3: BigNumber;
    4: string;
  }>;

  transferPunk(
    to: string,
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'transferPunk(address,uint256)'(
    to: string,
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPunk(punkIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'buyPunk(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'offerPunkForSaleToAddress(uint256,uint256,address)'(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    punkIndexToAddress(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    'punkIndexToAddress(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    punksOfferedForSale(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isForSale: boolean;
      punkIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
      0: boolean;
      1: BigNumber;
      2: string;
      3: BigNumber;
      4: string;
    }>;

    'punksOfferedForSale(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isForSale: boolean;
      punkIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
      0: boolean;
      1: BigNumber;
      2: string;
      3: BigNumber;
      4: string;
    }>;

    transferPunk(
      to: string,
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'transferPunk(address,uint256)'(
      to: string,
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPunk(punkIndex: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'buyPunk(uint256)'(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'offerPunkForSaleToAddress(uint256,uint256,address)'(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    punkIndexToAddress(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'punkIndexToAddress(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punksOfferedForSale(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'punksOfferedForSale(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPunk(
      to: string,
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'transferPunk(address,uint256)'(
      to: string,
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyPunk(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'buyPunk(uint256)'(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerPunkForSaleToAddress(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'offerPunkForSaleToAddress(uint256,uint256,address)'(
      punkIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    punkIndexToAddress(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'punkIndexToAddress(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punksOfferedForSale(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'punksOfferedForSale(uint256)'(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferPunk(
      to: string,
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'transferPunk(address,uint256)'(
      to: string,
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
