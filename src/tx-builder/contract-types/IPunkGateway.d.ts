/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPunkGatewayInterface extends ethers.utils.Interface {
  functions: {
    "auction(uint256,uint256,address)": FunctionFragment;
    "auctionETH(uint256,address)": FunctionFragment;
    "borrow(address,uint256,uint256,address,uint16)": FunctionFragment;
    "borrowETH(uint256,uint256,address,uint16)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "liquidateETH(uint256)": FunctionFragment;
    "punks()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemETH(uint256)": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "repayETH(uint256,uint256)": FunctionFragment;
    "wrappedPunks()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auction",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionETH",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowETH",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "punks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedPunks",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctionETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "punks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedPunks",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPunkGateway extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPunkGatewayInterface;

  functions: {
    auction(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "auction(uint256,uint256,address)"(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctionETH(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "auctionETH(uint256,address)"(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(address,uint256,uint256,address,uint16)"(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowETH(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrowETH(uint256,uint256,address,uint16)"(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateETH(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "liquidateETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    punks(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "punks()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    redeem(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemETH(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "redeemETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    repay(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repay(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayETH(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "repayETH(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    wrappedPunks(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wrappedPunks()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  auction(
    punkIndex: BigNumberish,
    bidPrice: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "auction(uint256,uint256,address)"(
    punkIndex: BigNumberish,
    bidPrice: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctionETH(
    punkIndex: BigNumberish,
    onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "auctionETH(uint256,address)"(
    punkIndex: BigNumberish,
    onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  borrow(
    reserveAsset: string,
    amount: BigNumberish,
    punkIndex: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(address,uint256,uint256,address,uint16)"(
    reserveAsset: string,
    amount: BigNumberish,
    punkIndex: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowETH(
    amount: BigNumberish,
    punkIndex: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrowETH(uint256,uint256,address,uint16)"(
    amount: BigNumberish,
    punkIndex: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateETH(
    punkIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "liquidateETH(uint256)"(
    punkIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  punks(overrides?: CallOverrides): Promise<string>;

  "punks()"(overrides?: CallOverrides): Promise<string>;

  redeem(
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    punkIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemETH(
    punkIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "redeemETH(uint256)"(
    punkIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  repay(
    punkIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repay(uint256,uint256)"(
    punkIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayETH(
    punkIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "repayETH(uint256,uint256)"(
    punkIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  wrappedPunks(overrides?: CallOverrides): Promise<string>;

  "wrappedPunks()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auction(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "auction(uint256,uint256,address)"(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionETH(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "auctionETH(uint256,address)"(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,uint256,uint256,address,uint16)"(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowETH(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrowETH(uint256,uint256,address,uint16)"(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(uint256)"(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateETH(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    punks(overrides?: CallOverrides): Promise<string>;

    "punks()"(overrides?: CallOverrides): Promise<string>;

    redeem(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemETH(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repay(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "repay(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    repayETH(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "repayETH(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    wrappedPunks(overrides?: CallOverrides): Promise<string>;

    "wrappedPunks()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    auction(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "auction(uint256,uint256,address)"(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctionETH(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "auctionETH(uint256,address)"(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(address,uint256,uint256,address,uint16)"(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowETH(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrowETH(uint256,uint256,address,uint16)"(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidate(uint256)"(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateETH(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "liquidateETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    punks(overrides?: CallOverrides): Promise<BigNumber>;

    "punks()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(punkIndex: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "redeem(uint256)"(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemETH(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "redeemETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    repay(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repay(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayETH(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "repayETH(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    wrappedPunks(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedPunks()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auction(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "auction(uint256,uint256,address)"(
      punkIndex: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctionETH(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "auctionETH(uint256,address)"(
      punkIndex: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(address,uint256,uint256,address,uint16)"(
      reserveAsset: string,
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowETH(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrowETH(uint256,uint256,address,uint16)"(
      amount: BigNumberish,
      punkIndex: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateETH(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "liquidateETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    punks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "punks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      punkIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemETH(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "redeemETH(uint256)"(
      punkIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    repay(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repay(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayETH(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "repayETH(uint256,uint256)"(
      punkIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    wrappedPunks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrappedPunks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
