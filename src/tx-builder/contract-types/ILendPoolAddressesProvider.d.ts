/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ILendPoolAddressesProviderInterface extends ethers.utils.Interface {
  functions: {
    "getAddress(bytes32)": FunctionFragment;
    "getBNFTRegistry()": FunctionFragment;
    "getBendDataProvider()": FunctionFragment;
    "getEmergencyAdmin()": FunctionFragment;
    "getIncentivesController()": FunctionFragment;
    "getLendPool()": FunctionFragment;
    "getLendPoolConfigurator()": FunctionFragment;
    "getLendPoolLiquidator()": FunctionFragment;
    "getLendPoolLoan()": FunctionFragment;
    "getMarketId()": FunctionFragment;
    "getNFTOracle()": FunctionFragment;
    "getPoolAdmin()": FunctionFragment;
    "getReserveOracle()": FunctionFragment;
    "getUIDataProvider()": FunctionFragment;
    "getWalletBalanceProvider()": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setAddressAsProxy(bytes32,address,bytes)": FunctionFragment;
    "setBNFTRegistry(address)": FunctionFragment;
    "setBendDataProvider(address)": FunctionFragment;
    "setEmergencyAdmin(address)": FunctionFragment;
    "setIncentivesController(address)": FunctionFragment;
    "setLendPoolConfiguratorImpl(address,bytes)": FunctionFragment;
    "setLendPoolImpl(address,bytes)": FunctionFragment;
    "setLendPoolLiquidator(address)": FunctionFragment;
    "setLendPoolLoanImpl(address,bytes)": FunctionFragment;
    "setMarketId(string)": FunctionFragment;
    "setNFTOracle(address)": FunctionFragment;
    "setPoolAdmin(address)": FunctionFragment;
    "setReserveOracle(address)": FunctionFragment;
    "setUIDataProvider(address)": FunctionFragment;
    "setWalletBalanceProvider(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBNFTRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBendDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendPoolConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendPoolLiquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendPoolLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUIDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletBalanceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressAsProxy",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBNFTRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBendDataProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentivesController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendPoolConfiguratorImpl",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendPoolImpl",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendPoolLiquidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendPoolLoanImpl",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setMarketId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNFTOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUIDataProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletBalanceProvider",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBNFTRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBendDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendPoolLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendPoolLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUIDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletBalanceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressAsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBNFTRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBendDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendPoolConfiguratorImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendPoolLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendPoolLoanImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUIDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletBalanceProvider",
    data: BytesLike
  ): Result;

  events: {
    "AddressSet(bytes32,address,bool,bytes)": EventFragment;
    "BNFTRegistryUpdated(address)": EventFragment;
    "BendDataProviderUpdated(address)": EventFragment;
    "ConfigurationAdminUpdated(address)": EventFragment;
    "EmergencyAdminUpdated(address)": EventFragment;
    "IncentivesControllerUpdated(address)": EventFragment;
    "LendPoolConfiguratorUpdated(address,bytes)": EventFragment;
    "LendPoolLiquidatorUpdated(address)": EventFragment;
    "LendPoolLoanUpdated(address,bytes)": EventFragment;
    "LendPoolUpdated(address,bytes)": EventFragment;
    "MarketIdSet(string)": EventFragment;
    "NftOracleUpdated(address)": EventFragment;
    "ProxyCreated(bytes32,address)": EventFragment;
    "ReserveOracleUpdated(address)": EventFragment;
    "UIDataProviderUpdated(address)": EventFragment;
    "WalletBalanceProviderUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BNFTRegistryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BendDataProviderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigurationAdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncentivesControllerUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendPoolConfiguratorUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendPoolLiquidatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendPoolLoanUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketIdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UIDataProviderUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WalletBalanceProviderUpdated"
  ): EventFragment;
}

export class ILendPoolAddressesProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILendPoolAddressesProviderInterface;

  functions: {
    getAddress(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBNFTRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getBNFTRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBendDataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getBendDataProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getEmergencyAdmin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getEmergencyAdmin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getIncentivesController(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getIncentivesController()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLendPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLendPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLendPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLendPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLendPoolLiquidator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLendPoolLiquidator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLendPoolLoan(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLendPoolLoan()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getMarketId(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getMarketId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getNFTOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getNFTOracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPoolAdmin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPoolAdmin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getReserveOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getReserveOracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getUIDataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getUIDataProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getWalletBalanceProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getWalletBalanceProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAddressAsProxy(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddressAsProxy(bytes32,address,bytes)"(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBNFTRegistry(
      factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBNFTRegistry(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBendDataProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBendDataProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEmergencyAdmin(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmergencyAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIncentivesController(
      controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIncentivesController(address)"(
      controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendPoolConfiguratorImpl(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendPoolConfiguratorImpl(address,bytes)"(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendPoolImpl(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendPoolImpl(address,bytes)"(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendPoolLiquidator(
      liquidator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendPoolLiquidator(address)"(
      liquidator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendPoolLoanImpl(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendPoolLoanImpl(address,bytes)"(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMarketId(
      marketId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNFTOracle(
      nftOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNFTOracle(address)"(
      nftOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolAdmin(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveOracle(
      reserveOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveOracle(address)"(
      reserveOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUIDataProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUIDataProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWalletBalanceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWalletBalanceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getAddress(bytes32)"(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getBNFTRegistry(overrides?: CallOverrides): Promise<string>;

  "getBNFTRegistry()"(overrides?: CallOverrides): Promise<string>;

  getBendDataProvider(overrides?: CallOverrides): Promise<string>;

  "getBendDataProvider()"(overrides?: CallOverrides): Promise<string>;

  getEmergencyAdmin(overrides?: CallOverrides): Promise<string>;

  "getEmergencyAdmin()"(overrides?: CallOverrides): Promise<string>;

  getIncentivesController(overrides?: CallOverrides): Promise<string>;

  "getIncentivesController()"(overrides?: CallOverrides): Promise<string>;

  getLendPool(overrides?: CallOverrides): Promise<string>;

  "getLendPool()"(overrides?: CallOverrides): Promise<string>;

  getLendPoolConfigurator(overrides?: CallOverrides): Promise<string>;

  "getLendPoolConfigurator()"(overrides?: CallOverrides): Promise<string>;

  getLendPoolLiquidator(overrides?: CallOverrides): Promise<string>;

  "getLendPoolLiquidator()"(overrides?: CallOverrides): Promise<string>;

  getLendPoolLoan(overrides?: CallOverrides): Promise<string>;

  "getLendPoolLoan()"(overrides?: CallOverrides): Promise<string>;

  getMarketId(overrides?: CallOverrides): Promise<string>;

  "getMarketId()"(overrides?: CallOverrides): Promise<string>;

  getNFTOracle(overrides?: CallOverrides): Promise<string>;

  "getNFTOracle()"(overrides?: CallOverrides): Promise<string>;

  getPoolAdmin(overrides?: CallOverrides): Promise<string>;

  "getPoolAdmin()"(overrides?: CallOverrides): Promise<string>;

  getReserveOracle(overrides?: CallOverrides): Promise<string>;

  "getReserveOracle()"(overrides?: CallOverrides): Promise<string>;

  getUIDataProvider(overrides?: CallOverrides): Promise<string>;

  "getUIDataProvider()"(overrides?: CallOverrides): Promise<string>;

  getWalletBalanceProvider(overrides?: CallOverrides): Promise<string>;

  "getWalletBalanceProvider()"(overrides?: CallOverrides): Promise<string>;

  setAddress(
    id: BytesLike,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddress(bytes32,address)"(
    id: BytesLike,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAddressAsProxy(
    id: BytesLike,
    impl: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddressAsProxy(bytes32,address,bytes)"(
    id: BytesLike,
    impl: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBNFTRegistry(
    factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBNFTRegistry(address)"(
    factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBendDataProvider(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBendDataProvider(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEmergencyAdmin(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmergencyAdmin(address)"(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIncentivesController(
    controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIncentivesController(address)"(
    controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendPoolConfiguratorImpl(
    configurator: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendPoolConfiguratorImpl(address,bytes)"(
    configurator: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendPoolImpl(
    pool: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendPoolImpl(address,bytes)"(
    pool: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendPoolLiquidator(
    liquidator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendPoolLiquidator(address)"(
    liquidator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendPoolLoanImpl(
    loan: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendPoolLoanImpl(address,bytes)"(
    loan: string,
    encodedCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMarketId(
    marketId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarketId(string)"(
    marketId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNFTOracle(
    nftOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNFTOracle(address)"(
    nftOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolAdmin(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolAdmin(address)"(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveOracle(
    reserveOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveOracle(address)"(
    reserveOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUIDataProvider(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUIDataProvider(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWalletBalanceProvider(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWalletBalanceProvider(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getBNFTRegistry(overrides?: CallOverrides): Promise<string>;

    "getBNFTRegistry()"(overrides?: CallOverrides): Promise<string>;

    getBendDataProvider(overrides?: CallOverrides): Promise<string>;

    "getBendDataProvider()"(overrides?: CallOverrides): Promise<string>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<string>;

    "getEmergencyAdmin()"(overrides?: CallOverrides): Promise<string>;

    getIncentivesController(overrides?: CallOverrides): Promise<string>;

    "getIncentivesController()"(overrides?: CallOverrides): Promise<string>;

    getLendPool(overrides?: CallOverrides): Promise<string>;

    "getLendPool()"(overrides?: CallOverrides): Promise<string>;

    getLendPoolConfigurator(overrides?: CallOverrides): Promise<string>;

    "getLendPoolConfigurator()"(overrides?: CallOverrides): Promise<string>;

    getLendPoolLiquidator(overrides?: CallOverrides): Promise<string>;

    "getLendPoolLiquidator()"(overrides?: CallOverrides): Promise<string>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<string>;

    "getLendPoolLoan()"(overrides?: CallOverrides): Promise<string>;

    getMarketId(overrides?: CallOverrides): Promise<string>;

    "getMarketId()"(overrides?: CallOverrides): Promise<string>;

    getNFTOracle(overrides?: CallOverrides): Promise<string>;

    "getNFTOracle()"(overrides?: CallOverrides): Promise<string>;

    getPoolAdmin(overrides?: CallOverrides): Promise<string>;

    "getPoolAdmin()"(overrides?: CallOverrides): Promise<string>;

    getReserveOracle(overrides?: CallOverrides): Promise<string>;

    "getReserveOracle()"(overrides?: CallOverrides): Promise<string>;

    getUIDataProvider(overrides?: CallOverrides): Promise<string>;

    "getUIDataProvider()"(overrides?: CallOverrides): Promise<string>;

    getWalletBalanceProvider(overrides?: CallOverrides): Promise<string>;

    "getWalletBalanceProvider()"(overrides?: CallOverrides): Promise<string>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddressAsProxy(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddressAsProxy(bytes32,address,bytes)"(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setBNFTRegistry(factory: string, overrides?: CallOverrides): Promise<void>;

    "setBNFTRegistry(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBendDataProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBendDataProvider(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyAdmin(admin: string, overrides?: CallOverrides): Promise<void>;

    "setEmergencyAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncentivesController(
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIncentivesController(address)"(
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendPoolConfiguratorImpl(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendPoolConfiguratorImpl(address,bytes)"(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendPoolImpl(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendPoolImpl(address,bytes)"(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendPoolLiquidator(
      liquidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendPoolLiquidator(address)"(
      liquidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendPoolLoanImpl(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendPoolLoanImpl(address,bytes)"(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketId(marketId: string, overrides?: CallOverrides): Promise<void>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTOracle(nftOracle: string, overrides?: CallOverrides): Promise<void>;

    "setNFTOracle(address)"(
      nftOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolAdmin(admin: string, overrides?: CallOverrides): Promise<void>;

    "setPoolAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveOracle(
      reserveOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveOracle(address)"(
      reserveOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUIDataProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUIDataProvider(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWalletBalanceProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWalletBalanceProvider(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddressSet(
      id: null,
      newAddress: string | null,
      hasProxy: null,
      encodedCallData: null
    ): EventFilter;

    BNFTRegistryUpdated(newAddress: string | null): EventFilter;

    BendDataProviderUpdated(newAddress: string | null): EventFilter;

    ConfigurationAdminUpdated(newAddress: string | null): EventFilter;

    EmergencyAdminUpdated(newAddress: string | null): EventFilter;

    IncentivesControllerUpdated(newAddress: string | null): EventFilter;

    LendPoolConfiguratorUpdated(
      newAddress: string | null,
      encodedCallData: null
    ): EventFilter;

    LendPoolLiquidatorUpdated(newAddress: string | null): EventFilter;

    LendPoolLoanUpdated(
      newAddress: string | null,
      encodedCallData: null
    ): EventFilter;

    LendPoolUpdated(
      newAddress: string | null,
      encodedCallData: null
    ): EventFilter;

    MarketIdSet(newMarketId: null): EventFilter;

    NftOracleUpdated(newAddress: string | null): EventFilter;

    ProxyCreated(id: null, newAddress: string | null): EventFilter;

    ReserveOracleUpdated(newAddress: string | null): EventFilter;

    UIDataProviderUpdated(newAddress: string | null): EventFilter;

    WalletBalanceProviderUpdated(newAddress: string | null): EventFilter;
  };

  estimateGas: {
    getAddress(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBNFTRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getBNFTRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBendDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getBendDataProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getEmergencyAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    "getIncentivesController()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPool(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPoolConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendPoolConfigurator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPoolLiquidator(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendPoolLiquidator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendPoolLoan()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getNFTOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserveOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUIDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getUIDataProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletBalanceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getWalletBalanceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAddressAsProxy(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAddressAsProxy(bytes32,address,bytes)"(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBNFTRegistry(factory: string, overrides?: Overrides): Promise<BigNumber>;

    "setBNFTRegistry(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBendDataProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBendDataProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEmergencyAdmin(admin: string, overrides?: Overrides): Promise<BigNumber>;

    "setEmergencyAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIncentivesController(
      controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIncentivesController(address)"(
      controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendPoolConfiguratorImpl(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendPoolConfiguratorImpl(address,bytes)"(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendPoolImpl(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendPoolImpl(address,bytes)"(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendPoolLiquidator(
      liquidator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendPoolLiquidator(address)"(
      liquidator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendPoolLoanImpl(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendPoolLoanImpl(address,bytes)"(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMarketId(marketId: string, overrides?: Overrides): Promise<BigNumber>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNFTOracle(nftOracle: string, overrides?: Overrides): Promise<BigNumber>;

    "setNFTOracle(address)"(
      nftOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolAdmin(admin: string, overrides?: Overrides): Promise<BigNumber>;

    "setPoolAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveOracle(
      reserveOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveOracle(address)"(
      reserveOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUIDataProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUIDataProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWalletBalanceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWalletBalanceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddress(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBNFTRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBNFTRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBendDataProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBendDataProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEmergencyAdmin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncentivesController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIncentivesController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLendPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendPoolLiquidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendPoolLiquidator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLendPoolLoan()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarketId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNFTOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserveOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUIDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUIDataProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletBalanceProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWalletBalanceProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAddressAsProxy(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddressAsProxy(bytes32,address,bytes)"(
      id: BytesLike,
      impl: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBNFTRegistry(
      factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBNFTRegistry(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBendDataProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBendDataProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEmergencyAdmin(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmergencyAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIncentivesController(
      controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIncentivesController(address)"(
      controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendPoolConfiguratorImpl(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendPoolConfiguratorImpl(address,bytes)"(
      configurator: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendPoolImpl(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendPoolImpl(address,bytes)"(
      pool: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendPoolLiquidator(
      liquidator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendPoolLiquidator(address)"(
      liquidator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendPoolLoanImpl(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendPoolLoanImpl(address,bytes)"(
      loan: string,
      encodedCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMarketId(
      marketId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNFTOracle(
      nftOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNFTOracle(address)"(
      nftOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolAdmin(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveOracle(
      reserveOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveOracle(address)"(
      reserveOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUIDataProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUIDataProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWalletBalanceProvider(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWalletBalanceProvider(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
