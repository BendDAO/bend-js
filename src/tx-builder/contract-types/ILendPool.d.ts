/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ILendPoolInterface extends ethers.utils.Interface {
  functions: {
    'MAX_NUMBER_NFTS()': FunctionFragment;
    'MAX_NUMBER_RESERVES()': FunctionFragment;
    'auction(address,uint256,uint256,address)': FunctionFragment;
    'borrow(address,uint256,address,uint256,address,uint16)': FunctionFragment;
    'deposit(address,uint256,address,uint16)': FunctionFragment;
    'finalizeTransfer(address,address,address,uint256,uint256,uint256)': FunctionFragment;
    'getAddressesProvider()': FunctionFragment;
    'getNftAuctionData(address,uint256)': FunctionFragment;
    'getNftCollateralData(address,address)': FunctionFragment;
    'getNftConfiguration(address)': FunctionFragment;
    'getNftData(address)': FunctionFragment;
    'getNftDebtData(address,uint256)': FunctionFragment;
    'getNftLiquidatePrice(address,uint256)': FunctionFragment;
    'getNftsList()': FunctionFragment;
    'getReserveConfiguration(address)': FunctionFragment;
    'getReserveData(address)': FunctionFragment;
    'getReserveNormalizedIncome(address)': FunctionFragment;
    'getReserveNormalizedVariableDebt(address)': FunctionFragment;
    'getReservesList()': FunctionFragment;
    'initNft(address,address)': FunctionFragment;
    'initReserve(address,address,address,address)': FunctionFragment;
    'liquidate(address,uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'redeem(address,uint256)': FunctionFragment;
    'repay(address,uint256,uint256)': FunctionFragment;
    'setMaxNumberOfNfts(uint256)': FunctionFragment;
    'setMaxNumberOfReserves(uint256)': FunctionFragment;
    'setNftConfiguration(address,uint256)': FunctionFragment;
    'setPause(bool)': FunctionFragment;
    'setReserveConfiguration(address,uint256)': FunctionFragment;
    'setReserveInterestRateAddress(address,address)': FunctionFragment;
    'withdraw(address,uint256,address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'MAX_NUMBER_NFTS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_NUMBER_RESERVES',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'auction',
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [string, BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeTransfer',
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAddressesProvider',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftAuctionData',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftCollateralData',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftConfiguration',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'getNftData', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getNftDebtData',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftLiquidatePrice',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftsList',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveConfiguration',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveData',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveNormalizedIncome',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveNormalizedVariableDebt',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getReservesList',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initNft',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'initReserve',
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'repay',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxNumberOfNfts',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxNumberOfReserves',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setNftConfiguration',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setPause', values: [boolean]): string;
  encodeFunctionData(
    functionFragment: 'setReserveConfiguration',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setReserveInterestRateAddress',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: 'MAX_NUMBER_NFTS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_NUMBER_RESERVES',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'auction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAddressesProvider',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNftAuctionData',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNftCollateralData',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNftConfiguration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getNftData', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getNftDebtData',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNftLiquidatePrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNftsList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveConfiguration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveData',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveNormalizedIncome',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveNormalizedVariableDebt',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReservesList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initNft', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initReserve',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxNumberOfNfts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxNumberOfReserves',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setNftConfiguration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setPause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setReserveConfiguration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setReserveInterestRateAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Auction(address,address,uint256,address,uint256,address,address,uint256)': EventFragment;
    'Borrow(address,address,uint256,address,uint256,address,uint256,uint256,uint16)': EventFragment;
    'Deposit(address,address,uint256,address,uint16)': EventFragment;
    'Liquidate(address,address,uint256,uint256,address,uint256,address,uint256)': EventFragment;
    'Paused()': EventFragment;
    'Redeem(address,address,uint256,uint256,address,uint256,address,uint256)': EventFragment;
    'Repay(address,address,uint256,address,uint256,address,uint256)': EventFragment;
    'ReserveDataUpdated(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Unpaused()': EventFragment;
    'Withdraw(address,address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Auction'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveDataUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export class ILendPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILendPoolInterface;

  functions: {
    MAX_NUMBER_NFTS(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'MAX_NUMBER_NFTS()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    auction(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'auction(address,uint256,uint256,address)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'borrow(address,uint256,address,uint256,address,uint16)'(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'deposit(address,uint256,address,uint16)'(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getAddressesProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'getAddressesProvider()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getNftAuctionData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      bidderAddres: string;
      bidPrice: BigNumber;
      bidBorrowAmount: BigNumber;
      bidFine: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'getNftAuctionData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      bidderAddres: string;
      bidPrice: BigNumber;
      bidBorrowAmount: BigNumber;
      bidFine: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getNftCollateralData(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralInETH: BigNumber;
      totalCollateralInReserve: BigNumber;
      availableBorrowsInETH: BigNumber;
      availableBorrowsInReserve: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    'getNftCollateralData(address,address)'(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralInETH: BigNumber;
      totalCollateralInReserve: BigNumber;
      availableBorrowsInETH: BigNumber;
      availableBorrowsInReserve: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    getNftConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    'getNftConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    getNftData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        bNftAddress: string;
        id: number;
        0: { data: BigNumber; 0: BigNumber };
        1: string;
        2: number;
      };
    }>;

    'getNftData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        bNftAddress: string;
        id: number;
        0: { data: BigNumber; 0: BigNumber };
        1: string;
        2: number;
      };
    }>;

    getNftDebtData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      reserveAsset: string;
      totalCollateral: BigNumber;
      totalDebt: BigNumber;
      availableBorrows: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    'getNftDebtData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      reserveAsset: string;
      totalCollateral: BigNumber;
      totalDebt: BigNumber;
      availableBorrows: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getNftLiquidatePrice(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidatePrice: BigNumber;
      paybackAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    'getNftLiquidatePrice(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidatePrice: BigNumber;
      paybackAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getNftsList(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    'getNftsList()'(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getReserveConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    'getReserveConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        currentLiquidityRate: BigNumber;
        currentVariableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        bTokenAddress: string;
        debtTokenAddress: string;
        interestRateAddress: string;
        id: number;
        0: { data: BigNumber; 0: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: number;
        6: string;
        7: string;
        8: string;
        9: number;
      };
    }>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        currentLiquidityRate: BigNumber;
        currentVariableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        bTokenAddress: string;
        debtTokenAddress: string;
        interestRateAddress: string;
        id: number;
        0: { data: BigNumber; 0: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: number;
        6: string;
        7: string;
        8: string;
        9: number;
      };
    }>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReservesList(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    'getReservesList()'(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    initNft(
      asset: string,
      bNftAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'initNft(address,address)'(
      asset: string,
      bNftAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initReserve(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'initReserve(address,address,address,address)'(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'liquidate(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    'paused()'(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    redeem(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'redeem(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repay(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'repay(address,uint256,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxNumberOfNfts(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setMaxNumberOfNfts(uint256)'(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxNumberOfReserves(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setMaxNumberOfReserves(uint256)'(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setNftConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPause(val: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    'setPause(bool)'(
      val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setReserveConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveInterestRateAddress(
      asset: string,
      rateAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setReserveInterestRateAddress(address,address)'(
      asset: string,
      rateAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'withdraw(address,uint256,address)'(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_NUMBER_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

  'MAX_NUMBER_NFTS()'(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>;

  'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<BigNumber>;

  auction(
    nftAsset: string,
    nftTokenId: BigNumberish,
    bidPrice: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'auction(address,uint256,uint256,address)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    bidPrice: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrow(
    reserveAsset: string,
    amount: BigNumberish,
    nftAsset: string,
    nftTokenId: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'borrow(address,uint256,address,uint256,address,uint16)'(
    reserveAsset: string,
    amount: BigNumberish,
    nftAsset: string,
    nftTokenId: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    reserve: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'deposit(address,uint256,address,uint16)'(
    reserve: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeTransfer(
    asset: string,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
    asset: string,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAddressesProvider(overrides?: CallOverrides): Promise<string>;

  'getAddressesProvider()'(overrides?: CallOverrides): Promise<string>;

  getNftAuctionData(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    loanId: BigNumber;
    bidderAddres: string;
    bidPrice: BigNumber;
    bidBorrowAmount: BigNumber;
    bidFine: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  'getNftAuctionData(address,uint256)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    loanId: BigNumber;
    bidderAddres: string;
    bidPrice: BigNumber;
    bidBorrowAmount: BigNumber;
    bidFine: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getNftCollateralData(
    nftAsset: string,
    reserveAsset: string,
    overrides?: CallOverrides
  ): Promise<{
    totalCollateralInETH: BigNumber;
    totalCollateralInReserve: BigNumber;
    availableBorrowsInETH: BigNumber;
    availableBorrowsInReserve: BigNumber;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  'getNftCollateralData(address,address)'(
    nftAsset: string,
    reserveAsset: string,
    overrides?: CallOverrides
  ): Promise<{
    totalCollateralInETH: BigNumber;
    totalCollateralInReserve: BigNumber;
    availableBorrowsInETH: BigNumber;
    availableBorrowsInReserve: BigNumber;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  getNftConfiguration(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  'getNftConfiguration(address)'(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  getNftData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    bNftAddress: string;
    id: number;
    0: { data: BigNumber; 0: BigNumber };
    1: string;
    2: number;
  }>;

  'getNftData(address)'(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    bNftAddress: string;
    id: number;
    0: { data: BigNumber; 0: BigNumber };
    1: string;
    2: number;
  }>;

  getNftDebtData(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    loanId: BigNumber;
    reserveAsset: string;
    totalCollateral: BigNumber;
    totalDebt: BigNumber;
    availableBorrows: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  'getNftDebtData(address,uint256)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    loanId: BigNumber;
    reserveAsset: string;
    totalCollateral: BigNumber;
    totalDebt: BigNumber;
    availableBorrows: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  getNftLiquidatePrice(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidatePrice: BigNumber;
    paybackAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  'getNftLiquidatePrice(address,uint256)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidatePrice: BigNumber;
    paybackAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getNftsList(overrides?: CallOverrides): Promise<string[]>;

  'getNftsList()'(overrides?: CallOverrides): Promise<string[]>;

  getReserveConfiguration(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  'getReserveConfiguration(address)'(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  getReserveData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    bTokenAddress: string;
    debtTokenAddress: string;
    interestRateAddress: string;
    id: number;
    0: { data: BigNumber; 0: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: number;
    6: string;
    7: string;
    8: string;
    9: number;
  }>;

  'getReserveData(address)'(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    bTokenAddress: string;
    debtTokenAddress: string;
    interestRateAddress: string;
    id: number;
    0: { data: BigNumber; 0: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: number;
    6: string;
    7: string;
    8: string;
    9: number;
  }>;

  getReserveNormalizedIncome(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'getReserveNormalizedIncome(address)'(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveNormalizedVariableDebt(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'getReserveNormalizedVariableDebt(address)'(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReservesList(overrides?: CallOverrides): Promise<string[]>;

  'getReservesList()'(overrides?: CallOverrides): Promise<string[]>;

  initNft(
    asset: string,
    bNftAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'initNft(address,address)'(
    asset: string,
    bNftAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initReserve(
    asset: string,
    bTokenAddress: string,
    debtTokenAddress: string,
    interestRateAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'initReserve(address,address,address,address)'(
    asset: string,
    bTokenAddress: string,
    debtTokenAddress: string,
    interestRateAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'liquidate(address,uint256)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'redeem(address,uint256)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repay(
    nftAsset: string,
    nftTokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'repay(address,uint256,uint256)'(
    nftAsset: string,
    nftTokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxNumberOfNfts(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setMaxNumberOfNfts(uint256)'(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxNumberOfReserves(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setMaxNumberOfReserves(uint256)'(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftConfiguration(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setNftConfiguration(address,uint256)'(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPause(val: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  'setPause(bool)'(
    val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveConfiguration(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setReserveConfiguration(address,uint256)'(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveInterestRateAddress(
    asset: string,
    rateAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setReserveInterestRateAddress(address,address)'(
    asset: string,
    rateAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    reserve: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'withdraw(address,uint256,address)'(
    reserve: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_NUMBER_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_NUMBER_NFTS()'(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<BigNumber>;

    auction(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'auction(address,uint256,uint256,address)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'borrow(address,uint256,address,uint256,address,uint16)'(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'deposit(address,uint256,address,uint16)'(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressesProvider(overrides?: CallOverrides): Promise<string>;

    'getAddressesProvider()'(overrides?: CallOverrides): Promise<string>;

    getNftAuctionData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      bidderAddres: string;
      bidPrice: BigNumber;
      bidBorrowAmount: BigNumber;
      bidFine: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    'getNftAuctionData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      bidderAddres: string;
      bidPrice: BigNumber;
      bidBorrowAmount: BigNumber;
      bidFine: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getNftCollateralData(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralInETH: BigNumber;
      totalCollateralInReserve: BigNumber;
      availableBorrowsInETH: BigNumber;
      availableBorrowsInReserve: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    'getNftCollateralData(address,address)'(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralInETH: BigNumber;
      totalCollateralInReserve: BigNumber;
      availableBorrowsInETH: BigNumber;
      availableBorrowsInReserve: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    getNftConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    'getNftConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    getNftData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      bNftAddress: string;
      id: number;
      0: { data: BigNumber; 0: BigNumber };
      1: string;
      2: number;
    }>;

    'getNftData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      bNftAddress: string;
      id: number;
      0: { data: BigNumber; 0: BigNumber };
      1: string;
      2: number;
    }>;

    getNftDebtData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      reserveAsset: string;
      totalCollateral: BigNumber;
      totalDebt: BigNumber;
      availableBorrows: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    'getNftDebtData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      loanId: BigNumber;
      reserveAsset: string;
      totalCollateral: BigNumber;
      totalDebt: BigNumber;
      availableBorrows: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getNftLiquidatePrice(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidatePrice: BigNumber;
      paybackAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    'getNftLiquidatePrice(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidatePrice: BigNumber;
      paybackAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getNftsList(overrides?: CallOverrides): Promise<string[]>;

    'getNftsList()'(overrides?: CallOverrides): Promise<string[]>;

    getReserveConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    'getReserveConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      currentLiquidityRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      lastUpdateTimestamp: number;
      bTokenAddress: string;
      debtTokenAddress: string;
      interestRateAddress: string;
      id: number;
      0: { data: BigNumber; 0: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: number;
      6: string;
      7: string;
      8: string;
      9: number;
    }>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      currentLiquidityRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      lastUpdateTimestamp: number;
      bTokenAddress: string;
      debtTokenAddress: string;
      interestRateAddress: string;
      id: number;
      0: { data: BigNumber; 0: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: number;
      6: string;
      7: string;
      8: string;
      9: number;
    }>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<string[]>;

    'getReservesList()'(overrides?: CallOverrides): Promise<string[]>;

    initNft(
      asset: string,
      bNftAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initNft(address,address)'(
      asset: string,
      bNftAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initReserve(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initReserve(address,address,address,address)'(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'liquidate(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    redeem(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'redeem(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repay(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    'repay(address,uint256,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    setMaxNumberOfNfts(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setMaxNumberOfNfts(uint256)'(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxNumberOfReserves(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setMaxNumberOfReserves(uint256)'(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setNftConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(val: boolean, overrides?: CallOverrides): Promise<void>;

    'setPause(bool)'(val: boolean, overrides?: CallOverrides): Promise<void>;

    setReserveConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setReserveConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveInterestRateAddress(
      asset: string,
      rateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'setReserveInterestRateAddress(address,address)'(
      asset: string,
      rateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdraw(address,uint256,address)'(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Auction(
      user: null,
      reserve: string | null,
      bidPrice: null,
      nftAsset: string | null,
      nftTokenId: null,
      onBehalfOf: null,
      borrower: string | null,
      loanId: null
    ): EventFilter;

    Borrow(
      user: null,
      reserve: string | null,
      amount: null,
      nftAsset: null,
      nftTokenId: null,
      onBehalfOf: string | null,
      borrowRate: null,
      loanId: null,
      referral: BigNumberish | null
    ): EventFilter;

    Deposit(
      user: null,
      reserve: string | null,
      amount: null,
      onBehalfOf: string | null,
      referral: BigNumberish | null
    ): EventFilter;

    Liquidate(
      user: null,
      reserve: string | null,
      repayAmount: null,
      remainAmount: null,
      nftAsset: string | null,
      nftTokenId: null,
      borrower: string | null,
      loanId: null
    ): EventFilter;

    Paused(): EventFilter;

    Redeem(
      user: null,
      reserve: string | null,
      borrowAmount: null,
      fineAmount: null,
      nftAsset: string | null,
      nftTokenId: null,
      borrower: string | null,
      loanId: null
    ): EventFilter;

    Repay(
      user: null,
      reserve: string | null,
      amount: null,
      nftAsset: string | null,
      nftTokenId: null,
      borrower: string | null,
      loanId: null
    ): EventFilter;

    ReserveDataUpdated(
      reserve: string | null,
      liquidityRate: null,
      variableBorrowRate: null,
      liquidityIndex: null,
      variableBorrowIndex: null
    ): EventFilter;

    Unpaused(): EventFilter;

    Withdraw(
      user: string | null,
      reserve: string | null,
      amount: null,
      to: string | null
    ): EventFilter;
  };

  estimateGas: {
    MAX_NUMBER_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_NUMBER_NFTS()'(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<BigNumber>;

    auction(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'auction(address,uint256,uint256,address)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'borrow(address,uint256,address,uint256,address,uint16)'(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'deposit(address,uint256,address,uint16)'(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    'getAddressesProvider()'(overrides?: CallOverrides): Promise<BigNumber>;

    getNftAuctionData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getNftAuctionData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftCollateralData(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getNftCollateralData(address,address)'(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getNftConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftData(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getNftData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftDebtData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getNftDebtData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftLiquidatePrice(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getNftLiquidatePrice(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftsList(overrides?: CallOverrides): Promise<BigNumber>;

    'getNftsList()'(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<BigNumber>;

    'getReservesList()'(overrides?: CallOverrides): Promise<BigNumber>;

    initNft(
      asset: string,
      bNftAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'initNft(address,address)'(
      asset: string,
      bNftAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initReserve(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'initReserve(address,address,address,address)'(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'liquidate(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'redeem(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repay(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'repay(address,uint256,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxNumberOfNfts(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setMaxNumberOfNfts(uint256)'(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxNumberOfReserves(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setMaxNumberOfReserves(uint256)'(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setNftConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPause(val: boolean, overrides?: Overrides): Promise<BigNumber>;

    'setPause(bool)'(val: boolean, overrides?: Overrides): Promise<BigNumber>;

    setReserveConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setReserveConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveInterestRateAddress(
      asset: string,
      rateAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setReserveInterestRateAddress(address,address)'(
      asset: string,
      rateAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'withdraw(address,uint256,address)'(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_NUMBER_NFTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'MAX_NUMBER_NFTS()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_NUMBER_RESERVES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'MAX_NUMBER_RESERVES()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auction(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'auction(address,uint256,uint256,address)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      bidPrice: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrow(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'borrow(address,uint256,address,uint256,address,uint16)'(
      reserveAsset: string,
      amount: BigNumberish,
      nftAsset: string,
      nftTokenId: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'deposit(address,uint256,address,uint16)'(
      reserve: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressesProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getAddressesProvider()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftAuctionData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNftAuctionData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftCollateralData(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNftCollateralData(address,address)'(
      nftAsset: string,
      reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNftConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNftData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftDebtData(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNftDebtData(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftLiquidatePrice(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getNftLiquidatePrice(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getNftsList()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getReservesList()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initNft(
      asset: string,
      bNftAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'initNft(address,address)'(
      asset: string,
      bNftAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initReserve(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'initReserve(address,address,address,address)'(
      asset: string,
      bTokenAddress: string,
      debtTokenAddress: string,
      interestRateAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'liquidate(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'redeem(address,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repay(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'repay(address,uint256,uint256)'(
      nftAsset: string,
      nftTokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxNumberOfNfts(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setMaxNumberOfNfts(uint256)'(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxNumberOfReserves(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setMaxNumberOfReserves(uint256)'(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setNftConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPause(
      val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setPause(bool)'(
      val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setReserveConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateAddress(
      asset: string,
      rateAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setReserveInterestRateAddress(address,address)'(
      asset: string,
      rateAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'withdraw(address,uint256,address)'(
      reserve: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
